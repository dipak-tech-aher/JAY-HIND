import { BusinessParameterController } from '@controllers/BusinessParameter.controller'
import { KnowledgeBaseController } from '@controllers/KnowledgeBase.controller'
import express from 'express'

const { connectionRequest } = require('@middlewares/db-connection')
const { validateToken } = require('@middlewares/authentication-helper')
const businessParameterRouter = express.Router()
const knowledgeBaseRouter = express.Router()

const businessParameterController = new BusinessParameterController()
const knowledgeBaseController = new KnowledgeBaseController()

businessParameterRouter.use([connectionRequest])
knowledgeBaseRouter.use([connectionRequest])
// validatePermission

businessParameterRouter
  .get('/faqs', businessParameterController.getFAQs.bind(businessParameterController))
  .post('/faqs', businessParameterController.createOrUpdateFAQs.bind(businessParameterController))
  .delete('/faqs', businessParameterController.deleteFAQs.bind(businessParameterController))
  .post('/add-to-cart', businessParameterController.addToCart.bind(businessParameterController))
  .post('/get-cart', businessParameterController.getCart.bind(businessParameterController))
  .get('/get-app-config', businessParameterController.getBcaeAppConfigRecord.bind(businessParameterController))
  .get('/get-current-count', businessParameterController.getCurrentCount.bind(businessParameterController))
  .get('/get-total-count', businessParameterController.getTotalCount.bind(businessParameterController))
  .get('/get-modules-list', validateToken, businessParameterController.getModulesList.bind(businessParameterController))
  .put('/update-app-config/:id', validateToken, businessParameterController.updateBcaeAppConfig.bind(businessParameterController))
  .get('/lookup', businessParameterController.getBusinessParameterLookup.bind(businessParameterController))
  .get('/address-lookup', businessParameterController.getAddressLookup.bind(businessParameterController))
  .get('/menu/getMenu', validateToken, businessParameterController.getMainMenuByRole.bind(businessParameterController))
  .post('/template/create', validateToken, businessParameterController.createTemplateMaster.bind(businessParameterController))
  .put('/template/set-pinned-status', validateToken, businessParameterController.setPinnedStatus.bind(businessParameterController))
  .put('/template/update', validateToken, businessParameterController.updateTemplateMaster.bind(businessParameterController))
  .post('/template/get-mapped-unmapped', validateToken, businessParameterController.getMappedUnmappedTemplate.bind(businessParameterController))
  .post('/template/search', validateToken, businessParameterController.getTemplateDetails.bind(businessParameterController))
  .post('/interaction-template', validateToken, businessParameterController.getInteractionTemplateDetails.bind(businessParameterController))
  .post('/interaction-template/mobile', businessParameterController.getInteractionTemplateDetails.bind(businessParameterController))
  .post('/available-appointment', validateToken, businessParameterController.getAvailableAppointment.bind(businessParameterController))
  .post('/available-appointment-self-care', validateToken, businessParameterController.getAvailableAppointmentWebSelfCare.bind(businessParameterController))
  .post('/available-appointment/mobile', businessParameterController.getAvailableAppointment.bind(businessParameterController))
  .post('/template/calculate-slots', validateToken, businessParameterController.calculateAppointmentSlots.bind(businessParameterController))
  .post('/temp-appointment/create', validateToken, businessParameterController.tempAppointmentCreate.bind(businessParameterController))
  .post('/temp-appointment/mobile/create', businessParameterController.tempAppointmentCreate.bind(businessParameterController))
  .get('/notify-headers', validateToken, businessParameterController.getNotificationHeaders.bind(businessParameterController))
  .get('/shifts', validateToken, businessParameterController.getShiftMasters.bind(businessParameterController))
  .get('/calendar/search', validateToken, businessParameterController.getCalendarMaster.bind(businessParameterController))
  .get('/holiday/search', validateToken, businessParameterController.getHolidayMaster.bind(businessParameterController))
  .post('/template/mapping/create', validateToken, businessParameterController.createTemplateMapping.bind(businessParameterController))
  .post('/template/mapping/update', validateToken, businessParameterController.updateTemplateMapping.bind(businessParameterController))
  .get('/check-roster', validateToken, businessParameterController.checkRoster.bind(businessParameterController))
  .put('/business-details', validateToken, businessParameterController.businessDetails.bind(businessParameterController))
  // .get('/template/get-appointment-notification/:templateNo', validateToken, businessParameterController.getTemplateDetails.bind(businessParameterController))
  .post('/', validateToken, businessParameterController.createBusinessParameter.bind(businessParameterController))
  .put('/:code', validateToken, businessParameterController.updateBusinessParameter.bind(businessParameterController))
  .get('/code-types', businessParameterController.getBusinessParameterCodeTypeList.bind(businessParameterController))
  .get('/:code', businessParameterController.getBusinessParameter.bind(businessParameterController))
  .get('/list/:code', businessParameterController.getBusinessParameterList.bind(businessParameterController))
  .post('/bulk', businessParameterController.createBusinessParameterBulk.bind(businessParameterController))
  .post('/verify', businessParameterController.verifyBusinessParameterRecords.bind(businessParameterController))
  .post('/bcae-app-config-create', validateToken, businessParameterController.createBcaeAppConfigRecord.bind(businessParameterController))
  // .post('/portal/settings/', businessParameterController.createChannelSetting.bind(businessParameterController))
  // .post('/portal/settings/list', businessParameterController.getchannelSettingList.bind(businessParameterController))
  // .put('/portal/settings/', businessParameterController.updatechannelSetting.bind(businessParameterController))
  // .get('/portal/settings/:type', businessParameterController.getchannelSetting.bind(businessParameterController))

  // .post('/email/', businessParameterController.createEmailTemplate.bind(businessParameterController))
  // .post('/email/list', businessParameterController.getEmailTemplateList.bind(businessParameterController))
  // .put('/email/', businessParameterController.updateEmailTemplate.bind(businessParameterController))
  .post('/temp-appointment/create-chat', businessParameterController.tempAppointmentCreate.bind(businessParameterController))
  .post('/available-appointment-chat', businessParameterController.getAvailableAppointmentChat.bind(businessParameterController))
  .get('/template/get-terms-conditions', businessParameterController.getTermsAndConditions.bind(businessParameterController))
  .post('/save-card', businessParameterController.saveCard.bind(businessParameterController))
  .post('/future-appointment-chat', businessParameterController.getFutureAvailableAppointmentChat.bind(businessParameterController))
  .post('/get-menu', businessParameterController.getMenus.bind(businessParameterController))
  .post('/wifi-test', businessParameterController.getRecords.bind(businessParameterController))

  //
  .post('/lookup', businessParameterController.getBusinessParameterLookup.bind(businessParameterController))
  .post('/calendar', businessParameterController.getCalendarMaster.bind(businessParameterController))
  .post('/holiday', businessParameterController.getHolidayMaster.bind(businessParameterController))

knowledgeBaseRouter
  .get('/search', validateToken, knowledgeBaseController.searchKnowledgeBase.bind(knowledgeBaseController))
  .post('/get-knowledge-base', validateToken, knowledgeBaseController.getKnowledgeBase.bind(knowledgeBaseController))
  .get('/helpdesk', validateToken, knowledgeBaseController.searchKnowledgeBaseByHelpdesk.bind(knowledgeBaseController))
  .post('/list', knowledgeBaseController.requestStatementList.bind(knowledgeBaseController))
  .post('/create-request-statement', validateToken, knowledgeBaseController.createRequestStatement.bind(knowledgeBaseController))
  .put('/edit-request-statement/:id', validateToken, knowledgeBaseController.editRequestStatement.bind(knowledgeBaseController))
  .post('/add-statement', validateToken, knowledgeBaseController.AddRequestStatement.bind(knowledgeBaseController))
  .post('/get-knowledge-base-consumer', knowledgeBaseController.getKnowledgeBaseConsumer.bind(knowledgeBaseController))
  .post('/search-knowledge-base-consumer', knowledgeBaseController.searchKnowledgeBaseConsumer.bind(knowledgeBaseController))
  .post('/check-smart-assist', knowledgeBaseController.checkSmartAssist.bind(knowledgeBaseController))

module.exports = { businessParameterRouter, knowledgeBaseRouter }
